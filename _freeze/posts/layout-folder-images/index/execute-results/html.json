{
  "hash": "9af8ea75c15d7671f67954458e30db7a",
  "result": {
    "markdown": "---\ntitle: 'Programmatically embed (and layout) a whole folder of images in Quarto document'\ndescription: |\n    How to use 'asis' output from R code chunks to generate inline image links for an entire directory of images, AND arrange them using Quarto's custom figure layout syntax\ndate: \"2024-01-29\"\ndate-modified: last-modified\ncategories:\n  - quarto\n  - how-to\n  - markdown\n  - listings\nimage: carbon.png\n---\n\n\n## The Task\n\nSay you have a folder of images you want to include in a custom figure layout within a Quarto document. Here's what such folder might look like:\n\n```terminal\nlayout-folder-images/\n├── index.qmd\n└── images/\n    ├── image-001.png\n    ├── image-002.png\n```\n\nLet's say we want to include the `image-00*.png` images side-by-side. The Quarto markdown for this might look like:\n\n````{.md filename=\"index.qmd\"}\n::: {layout-ncol=2}\n!()[images/image-001.png]\n\n!()[images/image-002.png]\n\n:::\n````\n\n## Code chunk magic\n\nWriting out markdown is fine for a few images, but it could get quickly get tedious (e.g. a whole folder). Instead, why not use an R code chunk^[based on this [stackover flow question](https://stackoverflow.com/questions/34185130/can-i-link-to-all-image-files-in-a-directory-in-rmd)] to generate the markdown:\n\n```{{r}}\n#| output: asis\nimg_files <- fs::dir_ls(\"images\", glob=\"*.png\")\ncat(\"::: {layout-ncol=2}\\n\",\n    glue::glue(\"![]({img_files})\\n\\n\\n\"),\n    \":::\",\n    sep = \"\"\n)\n```\n\n## Example Output\n\nHere's some example output[^2] using some sketchnotes I drew many years ago:\n\n\n::: {layout-ncol=2}\n![](images/image-00.png)\n\n![](images/image-01.png)\n\n:::\n\n\n[^2]: **Note to future me:** the example images come from a pdf (also in the source folder). This is the zsh command I used to extract each page as separate images using imagemagick: `convert -quality 100 -density 200 ${filename}.pdf image-%02d.png`\n\n## Code Explanation\n\nAnd finally, an explanation of how the code works:\n\n```r\nimg_files <- fs::dir_ls(images, glob=\"*.png\") # <1>\ncat(\"::: {layout-ncol=3}\\n\",                  # <2>\n    glue::glue(\"![]({img_files})\\n\\n\\n\"),     # <3>\n    \":::\",                                    # <3>\n    sep = \"\"                                  # <4>\n)\n```\n1. Get paths to all the image files in the `images/` folder.\n2. Use `cat()` to output the starting fence for the custom figure layout div.\n3. Use `glue()` to generate the inline image links for each image separated by new lines (required for custom layouts). Output the links with `cat()` and close the figure div.\n4. Set `cat()` to output each markdown component without any additional whitespace.\n\n## Notes and Extension Ideas\n\n- If your images have a natural order to them (as mine do in the example above), make sure your file names reflect this ordering. I think `dir_ls()` sorts alphabetically by default, so make sure to pad your numbering if you've got more than 9 files (i.e. to avoid `image-10.png` appearing before `image-9.png`).\n- Quarto allows you to specify custom layouts with non-equal columns/rows. See [Figures in the official Quarto Guide](https://quarto.org/docs/authoring/figures.html) for more.\n- My example doesn't support captions (i.e. the `[]` element is empty). You could easily rectify this by storing both file names and their captions in the same table, and using `glue::glue_data()` to generate a string from an expression like: `\"![{caption}]({img_path})\"`. See [this documentation](https://glue.tidyverse.org/reference/glue.html) from the `{glue}` package for more details.\n\nI wrote this code in order to bulk embed written notes I wrote at a few conferences last year into Quarto websites. I'll be writing about how I use Quarto as a personal knowledge management tool/scrapbook/research compendium in an upcoming blog post. Stay tuned!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}