{
  "hash": "f6f7e98578b4d1d6a85225286b49d99b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Creating a Pinterest-style image gallery with Quarto\ndescription: |\n  How I used masonry.js via Quarto extensions to create a cascading grid layout for a set of images without any Javascript skills.\ndate: 2024-07-23\ncategories:\n  - how-to\n  - images\n  - quarto\ncode-annotations: hover\n---\n\n\n## Standard vs. Cascading Grid Layouts\n\nI am a sucker for aesthetics and visual flow. In contests between function and form, I definitely lean towards form, though (hopefully) usually not at the expense of function. The upshot of this is that when I decided to share some sketches I made during my recent travels in Europe, I could not bring myself to just post them in a standard grid layout. It just didn't look right. But lucky for the stubborn stylist in me, with a bit of Quarto extension magic, I managed to make a cascading layout instead.\n\n::::{.column-body-outset}\n\n:::{layout-ncol=\"2\"}\n![](images/Screenshot_std-grid.png)\n\n![](images/Screenshot_cascading-grid.png)\n:::\n\n::::\n\nSee [here](/gallery/sketchbook/index.qmd) for the actual gallery, complete with lightbox treatment for each of the images!^[Lightbox figures have been available since Quarto v1.4. See [docs here]((https://quarto.org/docs/output-formats/html-lightbox-figures.html))]\n\n## Bridging my Taste > Skill mismatch with Quarto Extensions\n\nWith my very rudimentary front-end web development knowledge, I knew implementing the layout I wanted would involve some combination of HTML, CSS, Javascript type things. At first I didn't even know what the layout was called, but a quick conversation in GitHub CoPilot about \"Pinterest style image galleries\" lead me to \"Cascading Grid Layouts\" and the `masonry.js` library.\n\nStill, there was no way I was using said library with my beginner level web skills. Fortunately, `@mcanouil` has created an Quarto extension filter for using `masonry.js` in `.qmd` documents. The [repo](https://github.com/mcanouil/quarto-masonry) says it's experimental, but it was the best option on offer for me. So, I went ahead and added the extension to my Quarto project:\n\n```{.zsh}\nquarto add mcanouil/quarto-masonry\n```\n\nNow all that was left was to look at the `example.qmd`, pull across the relevant divs and styles, and then tweak until I was satisified / got too hungry and had to go get tacos for dinner.\n\nTo use the installed extension, I needed to add the following to my Quarto document:\n\n- YAML option to use the extension via `filters:`\n- Additional CSS to define and select grid items via `include-in-header:`\n- Divs with the relevant grid item class containing the images we want to tile using `:::` div fences.\n\nHere is a a very simple document based on the example in `mcanouil/quarto-masonry`:\n\n````{.md}\n---\ntitle: \"My Cascading Gallery\"\nlightbox: true\nfilters:\n  - masonry\ninclude-in-header:\n  - text: |\n      <style>\n        .grid-item {\n          width: 200px;\n          height: 160px;\n          float: left;\n          background: #D26;\n          border: 2px solid #333;\n          border-color: hsla(0, 0%, 0%, 0.5);\n          border-radius: 5px;\n        }\n      <style>\n---\n:::: {.grid data-masonry='{ \"itemSelector\": \".grid-item\", \"gutter\": 0 }'}\n:::{.grid-item}\n![example-caption-01](image-01.png)\n:::\n:::{.grid-item}\n![example-caption-02](image-02.png)\n:::\n:::{.grid-item}\n![example-caption-03](image-03.png)\n:::\n:::{.grid-item}\n![example-caption-04](image-04.png)\n:::\n:::{.grid-item}\n![example-caption-05](image-05.png)\n:::\n::::\n````\n\n## The Tweaking Process\n\nGetting everything working using the example was pretty easy, but I had to go through a few iterations of modifying CSS styles and inspecting the rendered page to:\n\n- change the tile size from fixed to flexible\n- change the tile background colour\n- hide the figure captions from the tiles, but retain the text for alt-text, hover-over and lightbox descriptions\n- remove the space between the bottom of the images and the bottom edge of the tiles\n\n::::{.column-body-outset}\n\n:::{layout-ncol=\"3\"}\n#### Screenshots of the tweaks\n\n![Fixed tile size and pink background](images/Screenshot_masonry-style-01.png)\n\n![Flexibly sized white tiles, but ugly figure captions](images/Screenshot_masonry-style-02.png)\n\n![No figure captions, but hanging margin underneath images in tiles](images/Screenshot_masonry-style-03.png)\n:::\n::::\n\nHere is an annotated version of the CSS I ended up using:\n\n```{.yaml}\n.grid-item {\n    width: 25%; # <1>\n    float: left;\n    background: #FFFFFF; # <2>\n    border: 2px solid #333;\n    border-color: hsla(0, 0%, 0%, 0.5);\n    border-radius: 5px;\n}\nfigcaption {\n    display: none; # <3>\n}\n.quarto-figure {\n    margin-bottom: 0px; # <4>\n    }\n```\n1. Not speficying `height` means the tiles expand with the image size\n2. Controls the color of tile background\n3. Controls display of text in `<figcaption>` element without affecting other attributes like `alt-text`\n4. Modifies the margins of the `.quarto-figure` class add by Quarto when rendering inline image references\n\n## Bonus Automation with {glue}\n\nI wrote in a [previous blog post](/posts/layout-folder-images/index.qmd) about using `{glue}` to generate layouts for collections of images programmatically. I adapted the idea to generate the grid items for the cascading layout instead of typing out each div and inline image reference by hand. Here's a reference code snippet, in case you want to do the same. The double braces `{{}}` are used to escape the special characters `{}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg_files <- fs::dir_ls(\"images\", glob=\"*.png\")\nimg_captions <- paste0(\"example-caption-0\", seq_along(img_files))\ncat(glue::glue(\"\n  :::{{.grid-item}}\n  ![{img_captions}]({img_files}){{group='sketches'}}\n  :::\"),\n  sep = \"\\n\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n:::{.grid-item}\n![example-caption-01](images/Screenshot_cascading-grid.png){group='sketches'}\n:::\n:::{.grid-item}\n![example-caption-02](images/Screenshot_masonry-style-01.png){group='sketches'}\n:::\n:::{.grid-item}\n![example-caption-03](images/Screenshot_masonry-style-02.png){group='sketches'}\n:::\n:::{.grid-item}\n![example-caption-04](images/Screenshot_masonry-style-03.png){group='sketches'}\n:::\n:::{.grid-item}\n![example-caption-05](images/Screenshot_std-grid.png){group='sketches'}\n:::\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}