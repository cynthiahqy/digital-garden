{
  "hash": "a261dc915e1fabc178b6cb88edd52e5e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Automating basic image edits with ImageMagick'\ndescription: 'A cheatsheet of ImageMagick commands I use to edit vector drawings from my iPad for inclusion in (Quarto markdown) documents, presentations and webpages'\ndate: '2024-02-04'\ndate-modified: last-modified\ncategories:\n  - imagemagick\n  - cli\n  - how-to\nimage: carbon-3.png\n---\n\n\n<!-- https://carbon.now.sh/?bg=rgba%28255%2C255%2C255%2C1%29&t=blackboard&wt=none&l=application%2Fx-sh&width=320&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=false&pv=69px&ph=55px&ln=false&fl=1&fm=Hack&fs=14px&lh=133%25&si=false&es=2x&wm=false&code=magick%2520input.png%2520-trim%2520-transparent%2520-fuzz%2520output.png -->\n\n::: {.callout-note}\nThe code chunks in this post were updated on Jul 22, 2024 to use `magick` instead of `convert` as per ImageMagick v7\n:::\n\n## The Task\n\nI'm a very visual thinker, and I often create diagrams, concept maps and \"graphical abstracts\"[^1] to think through. Depending on what's available I might sketch my ideas with pen and paper, on a whiteboard, or using my iPad. With a bit of polish and editing (often using my iPad), I can also use my drawings to communicate my research ideas -- i.e. including them in presentations or even journal papers. However, getting my drawings into my documents has always been a bit of a clunky process that goes something like:\n\n1. **Make and polish the drawing**. On iPad, I generally use Notability for quick sketches, and Concepts for polishing illustrations.\n2. **Export or Scan drawing to image file**. Ideally, I'd like to scan/export to `png` files with a sensible naming convention, but sometimes only `pdf` is possible (e.g. when I've got multiple pages of sketches).\n3. **Edit the image file for inclusion**. This includes extracting `pdf` pages as separate `png` files, cropping, making the background transparent.\n\n[^1]: According to Wikipedia, graphical abstracts are graphics used to summarise major results or key ideas of a paper -- i.e. a visual equivalent of a written abstract.\n\nThat last step is by far the most tedious. Luckily for me, tedium usually means there's an opportunity for automation! This post documents a few ImageMagick command line tricks for wrangling image files I use to reduce the friction between creating drawings (fun) and plugging them into my Quarto documents via markdown image links[^2] (boring!).\n\n[^2]: This is an inline image link: `![](cool-image.png)`\n\n## Install ImageMagick\n\nTL;DR: ImageMagick is cool tool that you can use via the command line. Here's a description from the official website [imagemagick.org](https://imagemagick.org/):\n\n> ImageMagick® is a free, open-source software suite, used for editing and manipulating digital images. It can be used to create, edit, compose, or convert bitmap images, and supports a wide range of file formats, including JPEG, PNG, GIF, TIFF, and PDF.\n\nIf you are on macOS, you can install imagemagick using homebrew:\n\n```bash\nbrew install imagemagick\n```\n\n## The Magick Commands\n\nThe next two sections give you commands to take two drawing files, `diagram_panel-map-sandwich-maker.png` and `sketch_tidydata.pdf` and generate cropped, transparent background images, all of which can be found in the source directory for this blog post (i.e. on GitHub):\n```terminal\n.\n├── images\n│   ├*─ diagram_panel-map-sandwich-maker.png\n│   ├── diagram_panel-map-sandwich-maker_trim-trans.png\n│   ├── diagram_panel-map-sandwich-maker_trimmed.png\n│   ├*─ sketch_tidydata.pdf\n│   ├── sketch_tidydata-00.png\n│   ├── sketch_tidydata-01.png\n│   ├── transp_sketch_tidydata-00.png\n│   └── transp_sketch_tidydata-01.png\n└── index.qmd\n```\n\n### Single page vector drawings (`png`)\n\nLet's start with a single page export `diagram_panel-map-sandwich-maker.png` from Notability:\n\n![](images/screenshot-png-preview.png)\n\nNotice that there's a lot of whitespace underneath my sketch because the page size is fixed (usually to A4 or letter depending on your in-app settings). Let's get rid of the extra whitespace (using `-trim`) and turn background transparent (using `-transparent`):\n\n```{.zsh}\nfilename=\"diagram_panel-map-sandwich-maker\"\n```\n\n```{.zsh filename=\"zsh: ~/.../images\"}\nmagick ${filename}.png -trim -transparent white ${filename}_trim-trans.png\n```\n\nThis gives us a tightly cropped image with a transparent background (which is only apparent when I make the webpage background red):\n\n:::{style=\"background-color: #f7d3cf;\"}\n![](images/diagram_panel-map-sandwich-maker_trim-trans.png)\n:::\n\n### Multi-page sketches (`pdf`)\n\nSometimes before you can trim your pages, you might need to extract them from a file like `sketch_tidydata.pdf`:\n\n![](images/screenshot-pdf-viewer.png)\n\nHere's the command to extract each page as a separate `png` file:\n\n```{.zsh}\nfilename=\"sketch_tidydata\"\n```\n\n```{.zsh filename=\"zsh: ~/.../images\"}\nmagick -quality 100 -density 200 ${filename}.pdf ${filename}-%02d.png\n```\n\nWe include the two resulting files here using the R code chunk trick for generating inline image links that I wrote about in this [previous blog post](https://www.cynthiahqy.com/posts/layout-folder-images/):\n\n:::{style=\"background-color: #f7d3cf;\"}\n\n::: {layout-ncol=2}\n![](images/sketch_tidydata-00.png)\n\n![](images/sketch_tidydata-01.png)\n\n:::\n\n:::\n\nThe two images were already trimmed, but what if we wanted to make the background transparent like this:\n\n:::{style=\"background-color: #f7d3cf;\"}\n\n::: {layout-ncol=2}\n![](images/transp_sketch_tidydata-00.png)\n\n![](images/transp_sketch_tidydata-01.png)\n\n:::\n\n:::\n\nWe could use a loop to achieve this:\n\n```{.zsh filename=\"zsh: ~/.../images\"}\nfor filepath in $(ls sketch*.png);\ndo\n  filename=${filepath:r}\n  magick ${filename}.png -fuzz 20% -transparent white transp_${filename}.png;\ndone\n```\n\n## Notes & Extensions\n\n### Single vector page\n- The `-transparent` flag turns any pixels that match the argument colour (e.g. `white`) and makes them transparent. If your background colour is not `white` you can replace the argument with the hexcode of the colour you want to make transparent.^[See: <https://stackoverflow.com/a/73571043>]\n- If you want padding around your image, you can always add it back using the relevant options for your document output format (e.g. CSS or LaTex figure options)\n\n### Multi-page pdf\n\n- The `-fuzz` flag specifies a distance around your target colour within which colours are considered equal. This is handy for scanned sketches that have a \"white\" background that only slightly differs from the target colour given to the `-transparent` flag.^[See <https://stackoverflow.com/questions/12424018/how-to-replace-white-background-color-with-transparent-of-an-image-in-imagemagic/12434319#12434319>]\n- If you search \"how to split up a pdf using ImageMagick\", you might come across commands that include the `-flatten` flag. Don't include this flag when using newer versions ImageMagick since it will just flatten all the pages onto into a single output image.^[See <https://github.com/ImageMagick/ImageMagick/discussions/6294>]",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}