{
  "hash": "644130a796ad9cfeb7540a54ecd5b8c8",
  "result": {
    "markdown": "---\ntitle: 'Generating bulleted lists inside pandoc markdown tables in R with pander'\ndescription: 'A short how-to on using pander in quarto/rmarkdown to generate markdown grid tables with bullet lists.'\ndate: '2023-05-15'\ncategories:\n  - markdown\n  - how-to\ntags:\n  - tables\n  - pander\n---\n\n\nI recently put together this markdown table for a [vignette](https://xmap-r-pkg.netlify.app/articles/making-xmaps.html#cheatsheet-for-verifying-mapping-objects) in the [`{xmap}` package](https://github.com/cynthiahqy/xmap/) using [Visual Mode in Rstudio](https://rstudio.github.io/visual-markdown-editing/):\n\n```md\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| x                | **Recoding** (1-to-1)                                       | **Collapsing** (M-to-1)                                          | **Splitting** (1-to-M)                                                              |\n+==================+=============================================================+==================================================================+=====================================================================================+\n| Assertions       | -   every link weight is either 1 or 0 (implied by absence) | -   link weights are binary                                      | -   link weights are fractional or absent                                           |\n|                  | -   cardinality of the source and target sets is the same   | -   there are more source categories than target categories      | -   there are more target categories than source categories                         |\n|                  |                                                             | -   each source category is assigned to only one target category | -   each source category has at least two outgoing links to the target nomenclature |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| xmap functions   | `verify_named_all_1to1()`                                   | `verify_named_all_values_unique()`                               | `verify_named_all_names_unique()`                                                   |\n|                  |                                                             |                                                                  |                                                                                     |\n|                  | `verify_pairs_all_1to1()`                                   | `verify_named_matchset`                                          | `verify_named_matchset`                                                             |\n|                  |                                                             |                                                                  |                                                                                     |\n|                  | ...                                                         | ...                                                              | ...                                                                                 |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| base R           | -   `all(weights == 1)`                                     | -   `all(weights == 1)`                                          | -   `all(weights < 1)`                                                              |\n|                  | -   `length(unique(from) == length(unique(to))`             | -   `length(unique(from) > length(unique(to))`                   | -   `length(unique(from)) < length(unique(to))`                                     |\n| conditions       |                                                             | -   `length(unique(from)) == length(from)`                       | -   `length(from) > length(unique(from))`                                           |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| Graph Conditions | -   $w_{ij} \\in \\{0,1\\} \\ \\forall i,j$                      | -   $w_{ij} \\in \\{0,1\\} \\forall i,j$                             | -   $w_{ij} \\in [0, 1) \\forall i,j$                                                 |\n|                  | -   $|U| = |V|$                                             | -   $|U| > |V|$                                                  | -   $|U| < |V|$                                                                     |\n|                  | -   $Out_i = In_j = 1 \\ \\forall i,j$                        | -   $Out_i = 1 \\ \\forall i \\in U$                                | -   $Out_i > 1 \\ \\forall i \\in U$                                                   |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n```\n\n[Visual mode](https://rstudio.github.io/visual-markdown-editing/content.html#editing-tables) generated a grid style pandoc markdown table, which renders into a table just fine except for the fact that it spills over into the navigation column...\n\n## Awkward table spillover\n\n::: mytable\n\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| x                | **Recoding** (1-to-1)                                       | **Collapsing** (M-to-1)                                          | **Splitting** (1-to-M)                                                              |\n+==================+=============================================================+==================================================================+=====================================================================================+\n| Assertions       | -   every link weight is either 1 or 0 (implied by absence) | -   link weights are binary                                      | -   link weights are fractional or absent                                           |\n|                  | -   cardinality of the source and target sets is the same   | -   there are more source categories than target categories      | -   there are more target categories than source categories                         |\n|                  |                                                             | -   each source category is assigned to only one target category | -   each source category has at least two outgoing links to the target nomenclature |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| xmap functions   | `verify_named_all_1to1()`                                   | `verify_named_all_values_unique()`                               | `verify_named_all_names_unique()`                                                   |\n|                  |                                                             |                                                                  |                                                                                     |\n|                  | `verify_pairs_all_1to1()`                                   | `verify_named_matchset`                                          | `verify_named_matchset`                                                             |\n|                  |                                                             |                                                                  |                                                                                     |\n|                  | ...                                                         | ...                                                              | ...                                                                                 |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| base R           | -   `all(weights == 1)`                                     | -   `all(weights == 1)`                                          | -   `all(weights < 1)`                                                              |\n|                  | -   `length(unique(from) == length(unique(to))`             | -   `length(unique(from) > length(unique(to))`                   | -   `length(unique(from)) < length(unique(to))`                                     |\n| conditions       |                                                             | -   `length(unique(from)) == length(from)`                       | -   `length(from) > length(unique(from))`                                           |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n| Graph Conditions | -   $w_{ij} \\in \\{0,1\\} \\ \\forall i,j$                      | -   $w_{ij} \\in \\{0,1\\} \\forall i,j$                             | -   $w_{ij} \\in [0, 1) \\forall i,j$                                                 |\n|                  | -   $|U| = |V|$                                             | -   $|U| > |V|$                                                  | -   $|U| < |V|$                                                                     |\n|                  | -   $Out_i = In_j = 1 \\ \\forall i,j$                        | -   $Out_i = 1 \\ \\forall i \\in U$                                | -   $Out_i > 1 \\ \\forall i \\in U$                                                   |\n+------------------+-------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------+\n\n:::\n\nNow, in addition to the spillover issue (which I did not figure out how to fix...), markdown tables can quite awkward to edit, and not that straight forward to version control. So, I thought I'd see if I could generate an similar table using one of the many awesome table rendering packages in R.\n\nUsually when I want to make tables I just call `knitr::kable()` and hope for the best. Unsuprisingly this did not work. I'm not sure if/how `knitr::kable()` can handle mixed cell types (i.e. text, code, math notation, lists), but luckily for me, it turns out the `{pander}` package has all the functionality I needed.\n\nWith the help of this stackoverflow answer, [How to write (bullet) lists in a table using rmarkdown and pandoc](https://stackoverflow.com/questions/31011265/how-to-write-bullet-lists-in-a-table-using-rmarkdown-and-pandoc), this is what I came up with:\n\n## Enter cell contents\n\nFirst, let's get put all the cell contents into R as character strings. For readability, I chose to enter each column as its own list and each bullet point as a separate element in a string vector. Notice that I had to escape all the backslashes using `\\\\`.\n\n::: {.cell}\n\n```{.r .cell-code}\nrecoding = list()\nrecoding$assertions = c(\"every link weight is either 1 or 0 (implied by absence)\",\n                        \"cardinality of the source and target sets is the same\")\nrecoding$xmap = c(\"`verify_named_all_1to1()`\",\n                  \"`verify_pairs_all_1to1()`\")\nrecoding$baseR = c(\"`all(weights == 1)`\",\n                   \"`length(unique(from) == length(unique(to))`\")\nrecoding$graph = c(\"$w_{ij} \\\\in \\\\{0,1\\\\} \\\\ \\\\forall i,j$\",\n                   \"$|U| = |V|$\",\n                   \"$Out_i = In_j = 1 \\\\ \\\\forall i,j$\")\n\ncollapse = list()\ncollapse$assertions = c(\"link weights are binary\",\n                        \"there are more source categories than target categories\",\n                        \"each source category is assigned to only one target category\")\ncollapse$xmap = c(\"`verify_named_all_values_unique()`\",\n                  \"`verify_named_matchset()`\")\ncollapse$baseR = c(\"`all(weights == 1)`\",\n                   \"`length(unique(from) > length(unique(to))`\")\ncollapse$graph = c(\"$w_{ij} \\\\in \\\\{0,1\\\\} \\\\forall i,j$\",\n                   \"$|U| > |V|$\",\n                   \"$Out_i = 1 \\\\ \\\\forall i \\\\in U$\")\n\nsplit = list()\nsplit$assertions = c(\"link weights are fractional or absent\",\n                     \"there are more target categories than source categories\",\n                     \"each source category has at least two outgoing links to the target nomenclature\")\nsplit$xmap = c(\"`verify_named_all_names_unique()`\",\n               \"`verify_named_matchset()`\")\nsplit$baseR = c(\"`all(weights < 1)`\",\n                \"`length(unique(from)) < length(unique(to))`\",\n                \"`length(from) > length(unique(from))`\")\nsplit$graph = c(\"$w_{ij} \\\\in [0, 1) \\\\forall i,j$\",\n                \"$|U| < |V|$\",\n                \"$Out_i > 1 \\\\ \\\\forall i \\\\in U$\")\n```\n:::\n\n\n## Pander the table\n\nNext, I collapse all the string vectors and unlist everything into data.frame columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_table = data.frame(recode = recoding |> lapply(function(x) paste0(paste(\"*\", x), collapse = \"\\\\\\n\")) |> unlist(),\n                      collapse = collapse |> lapply(function(x) paste0(paste(\"*\", x), collapse = \"\\\\\\n\")) |> unlist(),\n                      split = split |> lapply(function(x) paste0(paste(\"*\",x), collapse = \"\\\\\\n\")) |> unlist())\n```\n:::\n\n\nNote that `function(x)` basically takes a string vector `x` and turns it into a single string of bulleted items by:\n\n1. attaching bullets to each element using `y = paste(\"*\", x)`\n2. collapsing the elements with line breaks using `paste0(y, collapse = \"\\\\\\n\")`. I think the `\\\\\\` is required because we have to escape twice?\n\nFinally, we pass the table to `pander::pander()` to turn it into a markdown table:\n\n\n\n```{.r .cell-code}\nmy_table |>\n    pander::pander(caption = \"Special Cases {#tbl-special}\",\n                   keep.line.breaks = TRUE,\n                   style = \"grid\",\n                   split.table = Inf,\n                   justify = \"left\",\n                   split.cells = 20)\n```\n\n::: {.cell-output-display}\n+----------------+----------------------------+-------------------------------------+------------------------------------+\n| &nbsp;         | recode                     | collapse                            | split                              |\n+================+============================+=====================================+====================================+\n| **assertions** | * every link weight        | * link weights are                  | * link weights are                 |\n|                | is either 1 or 0           | binary\\                             | fractional or                      |\n|                | (implied by                | * there are more                    | absent\\                            |\n|                | absence)\\                  | source categories                   | * there are more                   |\n|                | * cardinality of the       | than target                         | target categories                  |\n|                | source and target          | categories\\                         | than source                        |\n|                | sets is the same           | * each source                       | categories\\                        |\n|                |                            | category is assigned                | * each source                      |\n|                |                            | to only one target                  | category has at                    |\n|                |                            | category                            | least two outgoing                 |\n|                |                            |                                     | links to the target                |\n|                |                            |                                     | nomenclature                       |\n+----------------+----------------------------+-------------------------------------+------------------------------------+\n| **xmap**       | *                          | *                                   | *                                  |\n|                | `verify_named_all_1to1()`\\ | `verify_named_all_values_unique()`\\ | `verify_named_all_names_unique()`\\ |\n|                | *                          | *                                   | *                                  |\n|                | `verify_pairs_all_1to1()`  | `verify_named_matchset()`           | `verify_named_matchset()`          |\n+----------------+----------------------------+-------------------------------------+------------------------------------+\n| **baseR**      | * `all(weights ==          | * `all(weights ==                   | * `all(weights <                   |\n|                | 1)`\\                       | 1)`\\                                | 1)`\\                               |\n|                | *                          | *                                   | *                                  |\n|                | `length(unique(from)       | `length(unique(from)                | `length(unique(from))              |\n|                | ==                         | >                                   | <                                  |\n|                | length(unique(to))`        | length(unique(to))`                 | length(unique(to))`\\               |\n|                |                            |                                     | * `length(from) >                  |\n|                |                            |                                     | length(unique(from))`              |\n+----------------+----------------------------+-------------------------------------+------------------------------------+\n| **graph**      | * $w_{ij} \\in              | * $w_{ij} \\in                       | * $w_{ij} \\in [0, 1)               |\n|                | \\{0,1\\} \\ \\forall          | \\{0,1\\} \\forall                     | \\forall i,j$\\                      |\n|                | i,j$\\                      | i,j$\\                               | * $|U| < |V|$\\                     |\n|                | * $|U| = |V|$\\             | * $|U| > |V|$\\                      | * $Out_i > 1 \\                     |\n|                | * $Out_i = In_j = 1        | * $Out_i = 1 \\                      | \\forall i \\in U$                   |\n|                | \\ \\forall i,j$             | \\forall i \\in U$                    |                                    |\n+----------------+----------------------------+-------------------------------------+------------------------------------+\n\nTable: Special Cases {#tbl-special}\n:::\n\n\nThe various available options are pretty well documented in `?pander::pandoc.table()` and in the [Markdown tables section of the package documentation](http://rapporter.github.io/pander/#markdown-tables)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}