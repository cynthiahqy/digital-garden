{
  "hash": "29240e1bf4596266a62f139426a9800a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Untangling templates, formats and extensions in Quarto'\ndescription: |\n  An attempt to clarify the different ways to reuse templates and extend the features of Quarto, along with a cheatsheet of Quarto CLI commands to `add`, `update` and `remove` extensions, `use` starter templates, and `create` projects.\ndate: '2024-03-11'\ndate-modified: last-modified\nengine: knitr\ncategories:\n  - quarto\n  - explainer\n  - how-to\nimage: featured.png\n---\n\n\n## Power and Confusion in Quarto\n\nThe powerful flexibility and extensibility of Quarto is one of the main reasons I love using it. There's always something new to experiment with from different templates for blogs, websites and books to alternative formats, themes and, styling and, even custom rendering or document features.\n\nHowever, there are often multiple ways to achieve the same outcome and even more ways to reuse modifications or customisation in a single document or multi-document projects. Unfortunately, this can lead to some confusion about things like the difference between document/project templates, custom formats, and extension features; or how to use the various `quarto create/use/add` commands.\n\nThis post attempts to untangle these differences, understand the different types of Quarto extensions and, provides some notes on using the associated `quarto-cli` commands and `.qmd` YAML options.\n\n> **DISCLAIMER:**\n> Much of what follows comes from snooping around existing Quarto extensions, reading the official Quarto [Creating Extensions](https://quarto.org/docs/extensions/creating.html) documentation, and attempting to author my own templates and extensions. Please excuse any inaccuracies. Corrections are welcome.\n\n## TL;DR Cheatsheet for Using Extensions\n\n> **NOTE:** unless otherwise indicated, all code chunks in this post are Quarto CLI commands.\n\n::: {.callout-tip}\nFor a simple overview of the different types of Quarto extensions: <https://quarto.org/docs/extensions/creating.html#overview>\n\nTo add a format or feature extension to an existing directory:\n```{.zsh}\nquarto add <gh-org>/<gh-repo>\n```\n\nTo list extension with details:\n```{.zsh}\nquarto list extensions\n```\n\nTo update or remove an extension:\n```{.zsh}\nquarto update <gh-org>/<gh-repo>\nquarto remove <gh-org>/<gh-repo>\n```\n\nTo get starter template files from GitHub repo:\n```{.zsh}\nquarto use template <gh-org>/<gh-repo>\n```\n\nTo use an existing GitHub repo as a starter template and create your own GitHub repo at the same time via [GitHub CLI](https://cli.github.com):\n```{.zsh .code-overflow-scroll}\ngh repo create <new-repo-name> --template <gh-org>/<gh-repo> --private --clone\n```\n\nTo set up a new project using built-in project templates and types:\n```{.zsh}\nquarto create-project --help\n```\n\nTo interactively set-up a new project or extension directory:\n```{.zsh}\nquarto create\n```\n\nIf the installation or usage details are unclear in the extension repo, try referring to the official quarto docs for creating that type of extension (e.g. for *Filters* see [this page](https://quarto.org/docs/extensions/filters.html#activating-filters))\n:::\n\n## Custom Formats and Template Documents\n\nAs with any other document creation software or system, templates in Quarto allow you to create documents that are \"just like\" another document. What exactly \"just like\" means can include aspects of structure, styling, and formatting, but generally does not include the \"contents\" of the document.\n\nThe most straightforward and transparent way of reusing `.qmd` documents as templates is probably to just copy and paste the YAML header from one file to another. This can of course get tedious, so Quarto offers a number of ways to reuse YAML options between files within the same folder or project, usually via \"Includes\", which I discussed in a [previous blog post](../slides-quarto-includes/index.qmd) on reusing and remixing content across revealjs slides.\n\nHowever, you might want to use the same document template across multiple projects. This is where **Custom Format** extensions come in. A [Custom Format extension](https://quarto.org/docs/extensions/formats.html) is bundle of document configuration options and assets (e.g. custom css, logo images etc.)[^1]. Instead of copy-pasting these elements, we store them together in a folder, and then direct Quarto to use the custom format when rendering. The contents of the custom format folder will vary depending on what \"base format\" it is extending or customising.\n\n[^1]: [Journal Articles](https://quarto.org/docs/journals/formats.html) are slightly more complicated formats, but work just the same as \"normal\" custom formats.\n\nYou can make a custom format available in existing `.qmd` documents using `quarto add <gh-org>/<gh-repo>`, which adds the custom format folder to your project like so:\n\n```{.zsh}\nquarto add schochastics/quarto-sketchy-html\n```\n\n```\n├── _extensions\n│   └── schochastics\n│       └── quarto-sketchy-html\n├── existing.qmd\n...\n```\n\nYou can then add all the bundled-up YAML options, features, and assets to your `existing.qmd` with the `format:` option in the YAML header:\n\n```{.yml filename=\"existing.qmd\"}\n---\ntitle: \"My new file using the `sketchy-html` format\"\nformat: sketchy-html\n---\n```\n\nThis tells Quarto to use all the options and assets in the custom format when rendering to `existing.qmd`. It's as if you had copy-pasted everything from the bundle into the right places to make a document \"just like\" the custom format.\n\nYou can usually find the name of the custom format in the README of the GitHub repository. However, if it's not there, it will be in **Template Document** that is usually available alongside the extension folder (e.g. [`schochastics/quarto-sketchy-html/template.qmd`](https://github.com/schochastics/quarto-sketchy-html/blob/main/template.qmd)). Now, notice that this template document is different from the document that the custom format was based on, and instead *uses* the custom format (via the `format:` option).\n\nIf you want to get both the custom format *and* the template document, you can use:\n```{.zsh}\nquarto use template <gh-org>/<gh-repo>\n```\n\nThis will download just the `_extensions` folder and the template document into a directory of your choice. You can then edit and render the template using the custom format.\n\n## Project Types and Starter Templates\n\nIn additional to authoring single documents, Quarto supports multi-document projects, which gives rise to project templates. A project template is a collection of template components such as template `.qmd` documents, directory structures, and default YAML options. Quarto also has \"project types\", which also seem to be templates by another name. The available project types in Quarto v1.4 are book, default, website, and manuscript. If you use the `quarto create-project` command, you'll notice that it allows you to select a project type (e.g `--type website`), with some default \"sub-types\" available via the template argument (e.g `--template blog`). However, regardless of whether you use the `--template` argument, the `quarto create-project` command sets up a new project for you (based on a template project type). Other project options can also be configured via additional arguments:\n\n::: {.callout collapse=\"true\"}\n## `quarto create-project --help`\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  Usage:   quarto create-project [dir]\n  Version: 1.4.549                    \n\n  Description:\n\n    Create a project for rendering multiple documents\n\n  Options:\n\n    -h, --help                   - Show this help.                                    \n    --title          <title>     - Project title                                      \n    --type           <type>      - Project type (book, default, website, manuscript)  \n    --template       <type>      - Use a specific project template                    \n    --engine         <engine>    - Use execution engine (markdown, jupyter, knitr)    \n    --editor         <editor>    - Default editor for project ('source' or 'visual')  \n    --with-venv      [packages]  - Create a virtualenv for this project               \n    --with-condaenv  [packages]  - Create a condaenv for this project                 \n    --no-scaffold                - Don't create initial project file(s)               \n    --log            <file>      - Path to log file                                   \n    --log-level      <level>     - Log level (info, warning, error, critical)         \n    --log-format     <format>    - Log format (plain, json-stream)                    \n    --quiet                      - Suppress console output.                           \n    --profile                    - Active project profile(s)                          \n\n  Commands:\n\n    help  [command]  - Show this help or the help of a sub-command.\n\n  Examples:\n\n    Create a project in the current directory:         quarto create-project                                                             \n    Create a project in the 'myproject' directory:     quarto create-project myproject                                                   \n    Create a website project:                          quarto create-project mysite --type website                                       \n    Create a blog project:                             quarto create-project mysite --type website --template blog                       \n    Create a book project:                             quarto create-project mybook --type book                                          \n    Create a website project with jupyter:             quarto create-project mysite --type website --engine jupyter                      \n    Create a website project with jupyter + kernel:    quarto create-project mysite --type website --engine jupyter:python3              \n    Create a book project with knitr:                  quarto create-project mybook --type book --engine knitr                           \n    Create jupyter project with virtualenv:            quarto create-project myproject --engine jupyter --with-venv                      \n    Create jupyter project with virtualenv + packages: quarto create-project myproject --engine jupyter --with-venv pandas,matplotlib    \n    Create jupyter project with condaenv :             quarto create-project myproject --engine jupyter --with-condaenv                  \n    Create jupyter project with condaenv + packages:   quarto create-project myproject --engine jupyter --with-condaenv pandas,matplotlib\n```\n\n\n:::\n:::\n\n\n:::\n\nYou can also interactively set-up a new project based on the included templates using `quarto create`. However, we might want to use an \"external\" set of files as the template for a new Quarto project. These are generally called **Starter Templates**. As with template documents for custom formats, you can use `quarto use template <gh-org>/<gh-repo>` to set up your new project using the specified repo as a starter template.\n\nFor example, I use a Quarto website as a personal wiki system for tracking my PhD progress. It contains all my meeting notes, research ideas, a brag/happy file^[See this [blog post](https://jvns.ca/blog/brag-documents/) by Julia Evans for why you should make yourself a brag file!]. I created a [template wiki](https://github.com/cynthiahqy/quarto-wiki-template) with some of the features I use and put it on GitHub so other PhD students could set-up a similar project in seconds using :\n\n```{.zsh}\nquarto use template cynthiahqy/quarto-wiki-template\n```\n\n::: {.callout-tip}\nFor those of you familiar with the GitHub CLI, you can create a new GitHub repo at the same time as grabbing a starter template using:\n\n```{.zsh .code-overflow-scroll}\ngh repo create <new-repo-name> --template <gh-org>/<gh-repo> --clone\n```\n\n\nNote that this grabs everything in the template repo. This is different to `quarto use template` for custom formats, which just grabs the template document and extensions folder (leaving behind other files like the README).\n:::\n\n## Feature Extensions\n\nNow that we've covered Custom Formats and Starter Templates, I'll briefly touch on the remaining types of Quarto extensions, which I lump together in a catch-all category I call \"Feature Extensions\". This includes *Shortcodes*, *Filters* and *revealjs Plugins*.\n\nIf custom formats allow me to render documents or projects that look or behave \"just like\" some base template, then feature extensions allow me to modify the rendering process and/or embed additional features into my `.qmd` files. They usually involve parts of the Quarto \"machine\" that I have little to no familiarity such as [Pandoc filters](https://quarto.org/docs/extensions/filters.html) or [revealjs plugins](https://quarto.org/docs/extensions/revealjs.html).\n\nSimilar to custom formats, feature extensions are distributed as bundles of files in an `_extension` folder. However, the way you use the extension differs depending on the type of feature. Instead of adding the extension to the `format:` option, filters and revealjs plugins are added via the `filters:` and `revealjs-plugin:` YAML keys, while shortcodes go directly in the body of your document.\n\n## Managing Extensions\n\nDepending on what mixture of formats and features you need in a project, you might add multiple extensions. To list all the extensions in a given project, run `quarto list extensions` from inside the main project directory. This will return something like:\n\n```\nId                               Version    Contributes\nquarto-ext/include-code-files    1.0.0      filters\nquarto-ext/fontawesome           1.1.0      shortcodes\nEmilHvitfeldt/letterbox          2.0.0      formats\nnumbats/monash                   0.0.1      formats\n```\n\nYou can use this list to update or remove extensions as well, using:\n```{.zsh}\nquarto update <extension-id>\nquarto remove <extension-id>\n```\n\n<!-- Since extensions are added from GitHub repos but not automatically updated, you might occasionally want to update your extensions to the latest version. This could be to get updates to a custom format, or to get bug fixes for feature extensions. To update an extension use: `quarto update <gh-org>/<gh-repo>` -->\n\n\n\n## Find out more\n\n- Official Quarto Docs:\n  - [Creating Extensions](https://quarto.org/docs/extensions/creating.html)\n  - [Managing Extensions](https://quarto.org/docs/extensions/managing.html)\n- Find extensions:\n  - [List of Available Quarto Extensions](https://quarto.org/docs/extensions/)\n  - [quarto-extension](https://github.com/topics/quarto-extension) topic on GitHub.^[Reminder: Only install extensions you trust. If in doubt, stick with the officially maintained extensions at [(`github.com/quarto-ext`)](https://github.com/quarto-ext)]\n- Read/Watch:\n  - [Extending Quarto](https://www.youtube.com/watch?v=EihuM4oyOvs) talk on shortcodes by Richard Iannone at `posit::conf(2023)`\n  - [Making Pretty PDFs with Quarto](https://nrennie.rbind.io/blog/making-pretty-pdf-quarto/) blog post on creating a custom LaTex format by Nicola Rennie\n<!-- - [Styling documents and building extensions with Quarto](https://nrennie.rbind.io/talks/bplim-quarto-extensions/) presentation on how to create custom HTML formats -->\n  - [Quarto on Steroids: Advanced Customization through Quarto Extensions](https://www.paltmeyer.com/blog/posts/quarto-extensions/) blog post on creating a custom HTML format for branded revealjs slides by Patrick Altmeyer\n\n**Please add any other useful resources in the comments below!**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}