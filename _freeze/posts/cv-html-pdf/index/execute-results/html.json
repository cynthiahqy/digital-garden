{
  "hash": "03a7bafc814379e8fda254ad46eba8ee",
  "result": {
    "markdown": "---\ntitle: 'Rendering my Quarto CV in HTML and PDF without LaTex'\ndescription: 'Forget LaTex. Publish multi-format documents from a single .qmd using weasyprint and some CSS stylesheet magic!'\ndate: '20230603'\ndate-modified: last-modified\ndraft: true\ncategories:\n  - css\n  - markdown\n  - quarto\n  - how-to\nimage: featured.png\nformat:\n  html:\n    code-fold: true\nfilters:\n  - include-code-files\n---\n\n\n## Multi-Format Sourcery\n\nDid you know you that from the same Quarto markdown file, you can render two versions of the same CV? -- a HTML webpage version, and a PDF version that can be downloaded from the same HTML webpage via the link under \"Other Formats\":\n\n![HTML webpage](images/other-format-link.png)\n\n![PDF output](images/pdf-multi-format.png)\n\n## Tutorial: Try it Yourself!\n\nTo replicate something similar, you will need to:\n\n1. write a Quarto markdown document with all your CV content in it.\n2. Customise some Quarto YAML options\n4. add some CSS magic to your CV document\n3. install `weasyprint` and render!\n\n### Quarto CV Template\n\nHere's an abridged version of Quarto CV document for steps 1 & 2:\n\n````{.markdown code-line-numbers=\"true\"}\n---\ntitle: \"Curriculum Vitae\"\nformat:\n  html:\n    toc: true\n  pdf:\n    author: Cynthia A Huang\n    pdf-engine: weasyprint\ncss: cv.css\nformat-links: [pdf]\n---\n\n::: {.print-only .contact-block}\ncynthia.huang@monash.edu\n:::\n\n## EDUCATION\n\n**Doctor of Philosophy -- Econometrics and Business Statistics** <br> *Monash University* [*Aug 2021 --- Present*]{.cvdate}\n\n-   New principles and methods for complex data preparation and integration, with applications to official statistics, web-scrapped data and satellite raster images\n-   Monash Data Futures Institute PhD Top-Up Scholarship (2021-2024)\n-   Expected submission date: Nov 2024\n\n## WORK EXPERIENCE{style=\"page-break-before: always\"}\n\n### Data Scientist\n\n***Freelance, Multiple Clients*** [Jan 2020 -- June 2021]{.cvdate}\n\nProviding data collection, pre-processing, exploratory analysis and modelling services to clients in the early R&D stages of developing data driven products. Projects include:\n\n-   Data description and preliminary product feasibility insights for a start-up real estate bond platform; including assessing suitability of various property transaction databases for use in initial product prototype.\n-   Development of statistical anomaly detection regimes and key historical insights from internet quality time-series data for use in parametric insurance products, including documenting analysis tools in an R package.\n\n### Research Assistant\n\n***Monash Addiction Research Center, Monash University*** [March 2023 -- Present]{.cvdate} <br> ***SoDa Laboratories, Monash University*** [July 2019 -- Present]{.cvdate} <br> ***Dept. of Economics, Monash University*** [Nov 2019 -- Present]{.cvdate} <br> ***Dept. of Econometrics and Business Statistics, Monash University*** [Oct 2020 -- Dec 2020]{.cvdate} <br> ***Dept. of Economics, University of Melbourne*** [Mar 2018 -- Dec 2018]{.cvdate}\n\nSupporting multiple projects with dataset design, data collection and pre-processing, exploratory visualisation, and preliminary analysis tasks. Project supervisors included:\n\n-   Monash University: Assoc. Prof. Nathaniel Lane (Uni. of Oxford), Prof. Paul Raschky, Assoc. Prof. Laura Puzzello, Assoc. Prof. Simon Angus, Dr. Patricia Menendez and Dr. Klaus Ackermann.\n-   University of Melbourne: Prof. David Byrne and Prof. Phillip McCalman.\n\n*Key skills and achievements include:*\n\n-   Processing archival microfiche and web-scraped data to construct chronological record of US spectrum license trading, including selecting harmonised variables and coordinating data entry by other team members.\n-   Sourcing archival magazines to collect produce and price information for the Laser Printer market from 1984 onwards\n-   Sourcing data online from Wikimedia, UNIDO, FedScope and DHS Program databases, including construction of SPARQL and REST API queries, writing reproducible web scraping and/or file download scripts\n-   Pre-processing of data including parsing XML data into tabular form, writing scripts and managing local resource usage for accessing big data archives such as Wikipedia dumps\n-   Merging multiple data releases into a single consistent panel including preparing and applying concordance tables to harmonise between ISIC (International Standard Industrial Classifications of All Economic Activities) revisions\n-   Reshaping data tables and pre-selection of key variables from DHS (Demographic and Health Survey) data for use with machine learning approaches\n-   Preparation of data summaries and visualisations highlighting key dataset features and preliminary exploratory insights and analysis\"\n\n::: {.no-print}\n## PRESENTATIONS AND WORKSHOPS\n\n::: {.cell}\n\n:::\n\n-   Talk: [Misadventures with Reproducibility in R](https://github.com/cynthiahqy/rladies-2022-11) (30 Nov 2022, R Ladies Melbourne Meetup)\n-   Talk: [Designing R Packages](https://github.com/cynthiahqy/design-r-magic_2022-10) (4 Oct 2022, Monash EBS Data Science Research Software Study Group)\n-   Talk: [Quarto Websites as Research Compendiums](https://github.com/cynthiahqy/quarto-wiki-template) (16 Aug 2022, Monash EBS Data Science Research Software Study Group)\n-   Workshop: [Writing academic papers with Rmarkdown and friends](https://www.cynthiahqy.com/posts/r-markdown-and-friends/) (9 Aug 2022, Monash University)\n\n:::\n\n::: {.print-only}\n## References\nAvailable upon request\n:::\n````\n\n### Now for the CSS magic\n\nFor step 3, I used a mixture of built-in Quarto CSS classes and custom classes. The custom classes are mostly for text formatting and page layout, while built-in the [Conditional Content](https://quarto.org/docs/authoring/conditional.html) classes are used for varying content between PDF and HTML formats.\n\nHere's the stylesheet I used^[adapted from this [GitHub Issue](https://github.com/quarto-dev/quarto-cli/discussions/2538#discussioncomment-4081842) by [James Goldie (@jimjam-slam)](https://github.com/jimjam-slam)]:\n\n```{.css include=\"../../cv.css\" filename=\"cv.css\"}\n```\n\nTo get slightly different content for the PDF and HTML versions\n-   at-rules (@media, @page): https://developer.mozilla.org/en-US/docs/Web/CSS/@page\n-   adjusting dimensions: https://doc.courtbouillon.org/weasyprint/stable/common_use_cases.html#adjust-document-dimensions\n\n-   page breaks via style spans: https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/posts/11-spans/\n-   page numbers: https://github.com/Kozea/WeasyPrint/issues/838\n\nstill to fix: - font-size - spacing between elements\n\n-   quarto conditional content: https://quarto.org/docs/authoring/conditional.html\n\n### Install weasyprint and render to PDF\n\nFinally, follow [these instructions](https://doc.courtbouillon.org/weasyprint/stable/first_steps.html#installation) to install `weasyprint`. If you are on macOS like me, use Homebrew:\n\n```bash\nbrew install weasyprint\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}