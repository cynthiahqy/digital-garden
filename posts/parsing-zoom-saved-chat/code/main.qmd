---
title: parsing zoom chat
jupyter: python3
---

```{python}
# data analysis
import pandas as pd
from numpy import nan
from datetime import datetime, timedelta

# string processing
import re
from io import StringIO
from itertools import chain
```

```{python}
## import local version chat log
with open("do-not-track/meeting_saved_chat.txt", "r", encoding="utf-8") as uploaded_file:
    string_data = uploaded_file.readlines()
```

```{python}
## extract metadata for "events" in the chat
regex_time = r'\d{2}:\d{2}:\d{2}'
r = re.compile(regex_time)

events = list(filter(r.match, string_data))
events = [line.strip() for line in events]

send_time = [r.match(line).group() for line in events]
send_from_to = [re.sub(regex_time, "", line).strip() for line in events]
```

```{python}
## extract message lines for each event
n_events = len(events)
msgs = [[] for i in range(n_events)]
interacts = [[] for i in range(n_events)]
line_types = [[] for i in range(n_events)]
i = -1

for (idx, line) in enumerate(string_data):
    if line.strip():
        if not re.match("\t",line):
            i += 1
        if re.match("\t", line):
            if re.match("\tReplying to", line):
                interacts[i].append(line)
                line_types[i].append("reply")
            elif re.match("\tReacted to", line):
                interacts[i].append(line)
                line_types[i].append("reaction")
            elif re.match("\tRemoved", line):
                interacts[i].append(line)
                line_types[i].append("remove")
            else:
                msgs[i].append(line)
                line_types[i].append("message")
```

```{python}
## collapse interacts
interacts = ["".join(item) for item in interacts]
msgs = ["".join(item) for item in msgs]
event_lines = [len(item) for item in line_types]
event_type = [item[0] for item in line_types]
assert(unique(event_type) == 4)

## strip leading and trailing whitespace
interacts = [item.strip() for item in interacts]
msgs = [item.strip() for item in msgs]
```

```{python}
chat_dict = {
    'time' : send_time,
    'sender' : send_from_to,
    'lines' : event_lines,
    'type' : event_type,
    'interacts': interacts,
    'message' : msgs, }

## unnest message column & make sure it doesn't add extra rows
chat_df = pd.DataFrame(chat_dict).explode('message')
assert(len(events) == chat_df.shape[0])
```

```{python}
## save the parsed file
chat_df.to_json("do-not-track/chat_df.json", orient = "records")
```